1. What is setInterval()  and setTimeout() methods in JavaScript?
setTimeout() and setInterval() are JavaScript timing events. The JavaScript setTimeout() method executes a function after a period of milliseconds. JavaScript setInterval() executes a function continuously after a certain period of milliseconds have passed.
setTimeout calls a function after a specified delay. setInterval calls a function continuously at a specified delay.
--> setTimeout()

JavaScript setTimeout() calls a method after a certain period of milliseconds have passed. The method is only called once. The setTimeout() method lets you introduce delays into your code.

window.setTimeout(function, time);
The two parameters accepted by setTimeout are:

function : The function you want to execute after a period of time has passed.
time : The amount of time your program should wait before executing a function.


Eg:-	setTimeout(() => {
		console.log("Career Karma!");
	}, 2000);


-->setInterval()
The JavaScript setInterval() method calls a function repeatedly. A specified delay is set between each time a function is called.

setInterval() uses a similar syntax to setTimeout():

window.setInterval(function, time);
You must specify two parameters to use setInterval:

function: The function that will be executed.
time: The time between each call of the function you have specified.

Whereas setTimeout only executes a function once, setInterval will keep executing a function over again. It uses the same syntax as the setTimeout method.


Eg:-    let i = 0;
	let coffees = ["Cortado", "Macchiato", "Mocha", "Latte"];

	function iterateOverArray() {
		console.log(coffees[i]);
		i++;
	}

setInterval(iterateOverArray, 1000);


2. What is asynchronous programming?
Asynchronous programming allows multiple processes to be started, lets the processes do their work, and when their job is finished, it gets the result and puts it through the steps.
It takes time for a function to fetch data from an API. Asynchronous programming was devised to accommodate for the lag between when a function is called to when the value of that function is returned.
Asynchronous programming allows multiple processes to be started, lets the processes do their work, and when their job is finished, it gets the result and puts it through the steps.
Asynchronous functions are often found in front end applications and used particularly in independent, high volume, IO tasks. Front end applications benefit from its use because it enhances the flow of an application.
Asynchronous programming exists in:
		Java
		JavaScript
		Typescript
		Dart



















































